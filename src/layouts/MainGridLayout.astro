---
import Footer from '@components/Footer.astro'
import Navbar from '@components/Navbar.astro'
import BackToTop from '@components/control/BackToTop.astro'
import SideBar from '@components/widget/SideBar.astro'
import Layout from './Layout.astro'
import { Icon } from 'astro-icon/components'
import { siteConfig } from '../config/config'
import type { MarkdownHeading } from 'astro'
import TOC from "../components/widget/TOC.astro";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import { Image } from 'astro:assets';
import path from 'node:path';
import { getDir } from '../utils/url-utils';
import TimelineController from '../components/timeline/TimelineBanner.astro';
import '../styles/timeline-styles.css';

// Import banner configuration
import { bannerConfig, getResponsiveBannerDimensions, getFallbackBannerCSS } from '../config/banner.config';

interface Props {
  title?: string
  banner?: string
  description?: string
  lang?: string
  setOGTypeArticle?: boolean
  headings?: MarkdownHeading[]
  post?: any 
}

// Update the Props destructuring in MainGridLayout.astro
const { 
  title, 
  banner = siteConfig.banner.src, // Default to the site banner if none provided
  description, 
  lang, 
  setOGTypeArticle, 
  headings = [], 
  post
} = Astro.props

// Get the post slug if available
const postSlug = post?.slug || '';
// Get custom avatar from post data if available
const customAvatar = post?.data?.avatarImage || '';
const customName = post?.data?.authorName || '';
const customBio = post?.data?.authorBio || '';

// Get banner dimensions from config
const { height: BANNER_HEIGHT, overlap: BANNER_OVERLAP } = getResponsiveBannerDimensions(false);
const NAVBAR_HEIGHT = 4.5; // rem (72px ≈ 4.5rem at 16px base font size)
const NAVBAR_HEIGHT_MOBILE = 3.5; // rem (56px ≈ 3.5rem)

// Check banner types
const hasTimelineBanner = post?.data?.bannerType === "timeline" && post?.data?.bannerData?.category;
const hasVideoBanner = post?.data?.bannerType === "video" && post?.data?.bannerData?.videoId;
const hasImageBanner = (post?.data?.image || (post?.data?.bannerType === "image" && post?.data?.bannerData?.imageUrl)) && !hasVideoBanner && !hasTimelineBanner;const isPostWithBanner = hasVideoBanner || hasImageBanner || hasTimelineBanner;
const isStandardPage = !isPostWithBanner;

// Update the mainPanelTop calculation to be responsive
const mainPanelTop = hasVideoBanner 
  ? "0" // For video banner: no overlap needed
  : hasImageBanner 
    ? "calc(var(--navbar-height) + 1rem)" // For image banner: navbar + spacing
    : `calc(${BANNER_HEIGHT} - ${BANNER_OVERLAP})`; // For animated banner: allow overlap

// Use bannerList from config
const bannerList = bannerConfig.bannerList;

const MAX_BANNER_WIDTH = bannerConfig.layout.maxWidth; // px
---

<Layout 
  title={title} 
  banner={banner} 
  description={description} 
  lang={lang} 
  setOGTypeArticle={setOGTypeArticle}
  post={post} 
>

  <!-- Navbar -->
  <slot slot="head" name="head"></slot>
  <div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-0 md:px-4 mx-auto">
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all">
      <Navbar></Navbar>
    </div>
  </div>

<!-- Unified Banner Container - handles all banner types -->
<div id="banner-container" 
class={`z-10 w-full ${hasTimelineBanner ? '' : 'overflow-hidden'} transition-all duration-500 ${isStandardPage ? 'absolute h-[' + bannerConfig.layout.height.desktop + ']' : 'relative'}`} 
style={isStandardPage 
  ? '' 
  : hasVideoBanner
    ? 'margin-top: calc(var(--navbar-height) - 3.5rem);' // Less space for video banner
    : hasTimelineBanner
      ? 'margin-top: 1rem;' // Add 2rem space for timeline banners
      : 'margin-top: 1rem;' // Reduced space for image banner
}>

<!-- Video Banner Content -->
{hasVideoBanner && (
  <div class="video-banner-content max-w-screen-2xl mx-auto px-4">
    <div class="relative w-full pb-[56.25%] bg-black overflow-hidden shadow-lg rounded-lg">
      <iframe
        src={`https://www.youtube.com/embed/${post.data.bannerData.videoId}?autoplay=0&mute=0&controls=1`}
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;"
        allowfullscreen
        class="absolute top-0 left-0 w-full h-full"
      ></iframe>
    </div>
  </div>
)}

{hasTimelineBanner && (
  <div class="timeline-banner-content max-w-screen-2xl mx-auto px-0 py-0">
    <div class="timeline-banner-container">
      <div class="timeline-banner-inner">
        <TimelineController 
          title={post.data.bannerData.title || post.data.title}
          category={post.data.bannerData.category}
          startYear={post.data.bannerData.startYear}
          endYear={post.data.bannerData.endYear}
          background={post.data.bannerData.background || "/public/posts/timeline/universe.png"}
          isCollapsed={false}
          compact={post.data.bannerData.compact || false}
          class="timeline-banner-controller"
          asBanner={true}
          bannerHeight={post.data.bannerData.height || "70vh"}
        />
      </div>
    </div>
  </div>
)}

{/* Image Banner Content */}
{hasImageBanner && (
  <div class="image-banner-content max-w-screen-2xl mx-auto px-0">
    <div class="relative w-full overflow-hidden shadow-lg rounded-lg">
      <img 
        src={post.data.bannerData?.imageUrl || post.data.image}
        alt={post.data.title || "Post banner image"}
        class="w-full object-cover"
      />
    </div>
  </div>
)}

<!-- This section needs to ensure it always renders something -->
{isStandardPage && (
  <div class="animated-banner-content max-w-screen-2xl mx-auto h-full relative">
   {bannerList.length > 0 ? bannerList.map((src, index) => (
     <Image
       src={src}
       alt="Banner image"
       width={bannerConfig.layout.maxWidth} 
       height={Math.round(bannerConfig.layout.maxWidth * 0.5625)} // 16:9 aspect ratio
       class={`absolute inset-0 w-full h-full object-${bannerConfig.visual.objectFit} object-${bannerConfig.visual.objectPosition} transition-opacity duration-${bannerConfig.animation.transitionDuration} ${
       index === 0 ? 'opacity-100' : 'opacity-0'
       }`}
       loading={index === 0 ? 'eager' : 'lazy'}
     />
   )) : (
     <!-- Fallback for empty banner list -->
     <div class="w-full h-full" style={`background: ${getFallbackBannerCSS()}`}></div>
   )}
   
   {/* Gradient overlay if enabled */}
   {bannerConfig.visual.applyGradientOverlay && (
     <div class="absolute inset-0 w-full h-full" style={`background: ${bannerConfig.visual.gradientOverlay}`}></div>
   )}
  </div>
)}
  
<!-- Banner - Responsive version -->
{siteConfig.banner.enable && 
  <div id="banner-wrapper" class="absolute z-10 w-full transition duration-700 overflow-hidden">
    <ImageWrapper 
      id="banner" 
      alt="Banner image of the blog" 
      class="object-cover h-full w-full transition duration-700 opacity-100 scale-100 md:scale-105"
      src={siteConfig.banner.src} 
      position={siteConfig.banner.position}
    />
    </ImageWrapper>
  </div>
}
</div>

<!-- Main content wrapper -->
<div class={`w-full z-30 pointer-events-none ${isStandardPage ? 'absolute' : 'relative'}`} 
style={isStandardPage 
  ? `top: calc(${bannerConfig.layout.height.desktop} - ${bannerConfig.layout.overlap.desktop});` 
  : hasVideoBanner 
    ? 'margin-top: 1.0rem;' // Smaller gap for video banner
    : 'margin-top: 1rem;'}>
<div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
<div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[17.5rem_auto] grid-rows-[auto_1fr_auto] lg:grid-rows-[auto]
   mx-auto gap-4 px-0 md:px-4">
   
   <SideBar 
   class="mb-4 row-start-2 row-end-3 col-span-2 lg:row-start-1 lg:row-end-2 lg:col-span-1 lg:max-w-[17.5rem] onload-animation" 
   headings={headings}
   postSlug={postSlug}
   customAvatar={customAvatar}
   customName={customName}
   customBio={customBio}
 ></SideBar>
 
 <main id="main" class="transition-swup-fade col-span-2 lg:col-span-1 overflow-hidden">
   <div id="main-content-wrapper" class="onload-animation">
     <slot></slot>
     <div class="footer col-span-2 onload-animation hidden lg:block">
       <Footer></Footer>
     </div>
   </div>
 </main>
 
 <div class="footer col-span-2 onload-animation block lg:hidden">
   <Footer></Footer>
 </div>
</div>

<BackToTop></BackToTop>
</div>
</div>

  <!-- The things that should be under the banner, only the TOC for now -->
  <div class="absolute w-full z-0 hidden 2xl:block">
    <div class="relative max-w-[var(--page-width)] mx-auto">
        <!-- TOC component -->
        {siteConfig.toc.enable && <div id="toc-wrapper" class="hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] flex items-center toc-animated">
            <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
                <div id="toc" class="w-full h-full transition-swup-fade ">
                    <div class="h-8 w-full"></div>
                    <TOC headings={headings}></TOC>
                    <div class="h-8 w-full"></div>
                </div>
            </div>
        </div>}

        <!-- #toc needs to exist for Swup to work normally -->
        {!siteConfig.toc.enable && <div id="toc"></div>}
    </div>
  </div>
</Layout>


<style define:vars={{ 
  'banner-height': bannerConfig.layout.height.desktop, 
  'banner-height-mobile': bannerConfig.layout.height.mobile,
  'banner-overlap': bannerConfig.layout.overlap.desktop,
  'banner-overlap-mobile': bannerConfig.layout.overlap.mobile,
  'navbar-height': `${NAVBAR_HEIGHT}rem`,
  'navbar-height-mobile': `${NAVBAR_HEIGHT_MOBILE}rem`
}}>
  /* Banner styles */
  #banner-container, #animated-banner {
    transition: height 0.5s ease-in-out;
  }
  
  #banner-container.absolute, #animated-banner {
    top: 0;
    height: var(--banner-height);
  }
  
  /* Video banner specifics */
  .video-banner-content {
    width: 100%;
  }
  
  /* Large screen handling */
  @media (min-width: 1921px) {
    .animated-banner-content:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(to right, rgba(0,0,0,0.15), transparent 10%, transparent 90%, rgba(0,0,0,0.15));
      z-index: 1;
    }
  }
  
  /* Mobile responsiveness */
  @media (max-width: 768px) {
    #banner-container.absolute, #animated-banner {
      height: var(--banner-height-mobile);
    }
    
    .w-full.z-30.absolute {
      top: calc(var(--banner-height-mobile) - var(--banner-overlap-mobile)) !important;
    }
    
    .video-banner-content, .image-banner-content {
      padding: 0 0.5rem;
    }
  }
  
  @media (max-width: 640px) {
    #post-video-banner, #post-image-banner {
      margin-top: var(--navbar-height-mobile); /* Smaller navbar on mobile */
    }
  }

  /* Animation styles */
  .onload-animation {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  .onload-animation.loaded {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* TOC styles */
  .toc-animated {
    transition: opacity 0.3s ease;
  }
  
  .toc-hide {
    opacity: 0;
    pointer-events: none;
  }
</style>

<script>
  // Import banner animation settings from config
  const bannerAnimationSettings = {
    enabled: true,
    interval: 5000,            // Default to 5 seconds if import fails
    transitionDuration: 1000,  // Default to 1 second if import fails
    direction: 'alternate'     // Default if import fails
  };

  document.addEventListener('DOMContentLoaded', () => {
    // Update navbar height
    updateNavbarHeight();
    
    // Initialize animations
    initializeAnimations();
    
    // Setup banner animation for standard pages
    setupBannerAnimation();
    
    // Set up event listeners
    setupEventListeners();
  });
  
  // Navbar height function
  function updateNavbarHeight() {
    const navbar = document.getElementById('navbar-wrapper');
    if (navbar) {
      const navbarHeight = navbar.offsetHeight;
      document.documentElement.style.setProperty('--navbar-height', `${navbarHeight}px`);
    }
  }
  
  // Animation initialization
  function initializeAnimations() {
    const elements = document.querySelectorAll('.onload-animation');
    elements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add('loaded');
      }, 100 + (index * 50));
    });
    
    // Show post image if present
    const postImage = document.getElementById('post-image');
    if (postImage) {
      setTimeout(() => {
        postImage.classList.remove('opacity-0', 'scale-105');
      }, 100);
    }
  }
  
  // Banner animation setup for standard pages
  function setupBannerAnimation() {
    const bannerContent = document.querySelector('.animated-banner-content');
    if (!bannerContent) return;
    
    const bannerImages = bannerContent.querySelectorAll('img');
    if (bannerImages.length <= 1) return; // Skip if only one image
    
    let currentIndex = 0;
    let direction = 1;
    
    function animateBanner() {
      // Determine next index based on animation direction
      let nextIndex;
      
      if (bannerAnimationSettings.direction === 'forward') {
        nextIndex = (currentIndex + 1) % bannerImages.length;
      } else if (bannerAnimationSettings.direction === 'reverse') {
        nextIndex = (currentIndex - 1 + bannerImages.length) % bannerImages.length;
      } else { // 'alternate'
        nextIndex = (currentIndex + direction) % bannerImages.length;
        
        // Change direction if we hit an edge
        if (nextIndex >= bannerImages.length - 1) direction = -1;
        if (nextIndex <= 0) direction = 1;
      }
      
      const nextImage = bannerImages[nextIndex] as HTMLImageElement;
      const currentImage = bannerImages[currentIndex] as HTMLImageElement;
      
      // Preload and fade
      const img = new Image();
      img.src = nextImage.src;
      img.onload = () => {
        nextImage.style.opacity = '1';
        setTimeout(() => {
          currentImage.style.opacity = '0';
        }, 100);
      };
      
      currentIndex = nextIndex;
    }
    
    // Only set up animation if enabled in config
    if (bannerAnimationSettings.enabled && bannerImages.length > 1) {
      setInterval(animateBanner, bannerAnimationSettings.interval);
    }
  }
  
  // Set up various event listeners
  function setupEventListeners() {
    // Handle TOC visibility on scroll
    window.addEventListener('scroll', () => {
      const scrollY = window.scrollY;
      const tocWrapper = document.querySelector('#toc-wrapper');
      if (tocWrapper) {
        if (scrollY > 300) {
          tocWrapper.classList.remove('toc-hide');
        } else {
          tocWrapper.classList.add('toc-hide');
        }
      }
    });
    
    // Handle resize events
    window.addEventListener('resize', () => {
      updateNavbarHeight();
      
      // Update banner height on mobile devices
      const isMobile = window.innerWidth <= 768;
      const bannerContainer = document.getElementById('banner-container');
      if (bannerContainer && bannerContainer.classList.contains('absolute')) {
        bannerContainer.style.height = isMobile 
          ? 'var(--banner-height-mobile)' 
          : 'var(--banner-height)';
      }
    });
    
    // Initial mobile check
    const isMobile = window.innerWidth <= 768;
    const bannerContainer = document.getElementById('banner-container');
    if (bannerContainer && bannerContainer.classList.contains('absolute')) {
      bannerContainer.style.height = isMobile 
        ? 'var(--banner-height-mobile)' 
        : 'var(--banner-height)';
    }
  }
  
  // Swup transitions handler
  function setupSwupTransitions() {
    if (!window.swup?.hooks) return;
    
    window.swup.hooks.on('page:view', () => {
      updateNavbarHeight();
      initializeAnimations();
      setupBannerAnimation();
    });
  }
  
  // Initialize Swup if available
  if (window.swup?.hooks) {
    setupSwupTransitions();
  } else {
    document.addEventListener('swup:enable', setupSwupTransitions);
  }
</script>