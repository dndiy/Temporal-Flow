---
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
import '@fontsource/sriracha/400.css';
import '@fontsource-variable/jetbrains-mono';

import { profileConfig, siteConfig } from '@/config/config'
import ConfigCarrier from '@components/ConfigCarrier.astro'
import {
  AUTO_MODE,
  DARK_MODE,
  LIGHT_MODE,
  PAGE_WIDTH,
} from '../constants/constants'
import { defaultFavicons } from '../constants/icon'
import type { Favicon } from '../types/config'
import { url, pathsEqual } from '../utils/url-utils'
import 'katex/dist/katex.css'

interface Props {
  title?: string
  banner?: string
  description?: string
  lang?: string
  setOGTypeArticle?: boolean
  post?: any
}

let { title, banner, description, lang, setOGTypeArticle, post } = Astro.props

// Check if we're on the home or post page for class assignments
const isHomePage = pathsEqual(Astro.url.pathname, url('/'))
const isPostPage = post?.data || Astro.url.pathname.includes('/posts/')

// Build page title
let pageTitle: string
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`
} else {
  pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`
}

// Get favicons configuration
const favicons: Favicon[] =
  siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons

// Set language
if (!lang) {
  lang = `${siteConfig.lang}`
}
const siteLang = lang.replace('_', '-')

// Theme color configuration
const configHue = siteConfig.themeColor.hue
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
    data-overlayscrollbars-initialize
>
  <head>
    <title>{pageTitle}</title>

    <meta charset="UTF-8" />
    <meta name="description" content={description || pageTitle}>
    <meta name="author" content={profileConfig.name}>
    
    <!-- Open Graph / Facebook -->
    <meta property="og:site_name" content={siteConfig.title}>
    <meta property="og:url" content={Astro.url}>
    <meta property="og:title" content={pageTitle}>
    <meta property="og:description" content={description || pageTitle}>
    <!-- Use your image path from frontmatter or a default image -->
    <meta property="og:image" content={
        post?.data?.image 
            ? new URL(post.data.image, Astro.site) 
            : new URL('/assets/banner/0001.png', Astro.site)
    }>
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    {setOGTypeArticle ? (
        <meta property="og:type" content="article" />
    ) : (
        <meta property="og:type" content="website" />
    )}
    
    <!-- Article metadata for blog posts -->
    {setOGTypeArticle && post?.data?.published && (
        <meta property="article:published_time" content={post.data.published.toISOString()}>
        )}
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content={Astro.url}>
    <meta name="twitter:title" content={pageTitle}>
    <meta name="twitter:description" content={description || pageTitle}>
    <meta property="twitter:image" content={
            post?.data?.image 
      ? 		new URL(post.data.image, Astro.site) 
      : 		new URL('/default-social-image.jpg', Astro.site)
    }>
    
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {favicons.map(favicon => (
        <link rel="icon"
            href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
            sizes={favicon.sizes}
            media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
        />
    ))}

    <!-- Set the theme before the page is rendered to avoid a flash -->
        <script is:inline define:vars={{LIGHT_MODE, DARK_MODE, AUTO_MODE, PAGE_WIDTH, configHue, defaultTheme: siteConfig.defaultTheme}}>
        // Load the theme from local storage
        const theme = localStorage.getItem('theme') || defaultTheme;
        switch (theme) {
            case LIGHT_MODE:
                document.documentElement.classList.remove('dark');
                break
            case DARK_MODE:
                document.documentElement.classList.add('dark');
                break
            case AUTO_MODE:
                if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
        }

        // Load the hue from local storage
        const hue = localStorage.getItem('hue') || configHue;
        document.documentElement.style.setProperty('--hue', hue);
    </script>
    <style define:vars={{
        configHue,
        'page-width': `${PAGE_WIDTH}rem`,
    }}></style>

    <slot name="head"></slot>

    <link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>
  </head>
  <body class="min-h-screen transition" 
      class:list={[{
          "lg:is-home": isHomePage, 
		}]}
      data-overlayscrollbars-initialize
  >
    <ConfigCarrier></ConfigCarrier>

    <slot />

    <!-- increase the page height during page transition to prevent the scrolling animation from jumping -->
    <div id="page-height-extend" class="hidden h-[300vh]"></div>
  </body>
</html>

<style is:global>
@tailwind components;
@layer components {
  #top-row {
    @apply h-[4.5rem] transition-all duration-300;
  }
  
  .navbar-hidden {
    @apply opacity-0 -translate-y-16;
  }
  
  /* Add animation styles for general page transitions */
  .onload-animation {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  .onload-animation.loaded {
    opacity: 1;
    transform: translateY(0);
  }
}
</style>

<script>
import 'overlayscrollbars/overlayscrollbars.css';
import {
    OverlayScrollbars,
} from 'overlayscrollbars';
import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";
import {pathsEqual, url} from "../utils/url-utils";

function setClickOutsideToClose(panel: string, ignores: string[]) {
    document.addEventListener("click", event => {
        let panelDom = document.getElementById(panel);
        let tDom = event.target;
        if (!(tDom instanceof Node)) return;
        for (let ig of ignores) {
            let ie = document.getElementById(ig)
            if (ie == tDom || (ie?.contains(tDom))) {
                return;
            }
        }
        panelDom!.classList.add("float-panel-closed");
    });
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])

function loadTheme() {
    const theme = getStoredTheme()
    setTheme(theme)
}

function loadHue() {
    setHue(getHue())
}

function initCustomScrollbar() {
    const bodyElement = document.querySelector('body');
    if (!bodyElement) return;
    OverlayScrollbars(
        {
            target: bodyElement,
            cancel: {
                nativeScrollbarsOverlaid: true,
            }
        }, {
        scrollbars: {
            theme: 'scrollbar-base scrollbar-auto py-1',
            autoHide: 'move',
            autoHideDelay: 500,
            autoHideSuspend: false,
        },
    });
    const preElements = document.querySelectorAll('pre');
    preElements.forEach((ele) => {
        OverlayScrollbars(ele, {
            scrollbars: {
                theme: 'scrollbar-base scrollbar-dark px-2',
                autoHide: 'leave',
                autoHideDelay: 500,
                autoHideSuspend: false
            }
        });
    });
    const katexElements = document.querySelectorAll('.katex-display') as NodeListOf<HTMLElement>;
    katexElements.forEach((ele) => {
        OverlayScrollbars(ele, {
            scrollbars: {
                theme: 'scrollbar-base scrollbar-auto py-1',
            }
        });
    });
}

function init() {
    loadTheme();
    loadHue();
    initCustomScrollbar();
}

/* Load settings when entering the site */
init();

// Setup handling for Swup page transitions
const setup = () => {
    window.swup.hooks.on('link:click', () => {
        // Remove the delay for the first time page load
        document.documentElement.style.setProperty('--content-delay', '0ms');
        
        // Handle navbar visibility
        let navbar = document.getElementById('navbar-wrapper');
        if (navbar) {
            const scrollThreshold = 300;
            if (document.body.scrollTop >= scrollThreshold || document.documentElement.scrollTop >= scrollThreshold) {
                navbar.classList.add('navbar-hidden');
            }
        }
    });
    
    window.swup.hooks.on('content:replace', () => {
        // Run initialization for new content
        initCustomScrollbar();
    });
    
	window.swup.hooks.on('visit:start', (visit: {to: {url: string}}) => {
		const bodyElement = document.querySelector('body');
		
		// Handle home page class
		if (pathsEqual(visit.to.url, url('/'))) {
			bodyElement!.classList.add('lg:is-home');
		} else {
			bodyElement!.classList.remove('lg:is-home');
		}
		
		// Handle post page class
		if (visit.to.url.includes('/posts/')) {
			bodyElement!.classList.add('is-post');
		} else {
			bodyElement!.classList.remove('is-post');
		}
		
		// Increase the page height during page transition 
		const heightExtend = document.getElementById('page-height-extend');
		if (heightExtend) {
			heightExtend.classList.remove('hidden');
		}
		
		// Reset animation states for transition
		const elements = document.querySelectorAll('.onload-animation');
		elements.forEach(element => {
			element.classList.remove('loaded');
		});
	});
    
    window.swup.hooks.on('page:view', () => {
        // Handle animations after page view
        const postElements = document.querySelectorAll('.onload-animation');
        postElements.forEach((element, index) => {
            // Stagger the animations slightly
            setTimeout(() => {
                element.classList.add('loaded');
            }, 100 + (index * 50));
        });
    });
    
    window.swup.hooks.on('visit:end', () => {
        setTimeout(() => {
            const heightExtend = document.getElementById('page-height-extend');
            if (heightExtend) {
                heightExtend.classList.add('hidden');
            }
            
            // Just make the transition looks better
            const toc = document.getElementById('toc-wrapper');
            if (toc) {
                toc.classList.remove('toc-not-ready');
            }
        }, 200);
    });
};

if (window?.swup?.hooks) {
    setup();
} else {
    document.addEventListener('swup:enable', setup);
}

// Handle back-to-top button visibility
let backToTopBtn = document.getElementById('back-to-top-btn');
let toc = document.getElementById('toc-wrapper');
let navbar = document.getElementById('navbar-wrapper');

function scrollFunction() {
    // Back-to-top button visibility
// Back-to-top button visibility
if (backToTopBtn) {
    if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        backToTopBtn.classList.remove('hide');
    } else {
        backToTopBtn.classList.add('hide');
    }
}

// TOC visibility
if (toc) {
    if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        toc.classList.remove('toc-hide');
    } else {
        toc.classList.add('toc-hide');
    }
}

// Navbar visibility - simplified
if (navbar) {
    if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        navbar.classList.add('navbar-hidden');
    } else {
        navbar.classList.remove('navbar-hidden');
    }
}}

window.onscroll = scrollFunction;
</script>

<script>
import PhotoSwipeLightbox from "photoswipe/lightbox";
import "photoswipe/style.css";

let lightbox: PhotoSwipeLightbox;
let pswp = import("photoswipe");

function createPhotoSwipe() {
    lightbox = new PhotoSwipeLightbox({
        gallery: ".custom-md img, #post-cover img",
        pswpModule: () => pswp,
        closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
        zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
        padding: { top: 20, bottom: 20, left: 20, right: 20 },
        wheelToZoom: true,
        arrowPrev: false,
        arrowNext: false,
        imageClickAction: 'close',
        tapAction: 'close',
        doubleTapAction: 'zoom',
    });

    lightbox.addFilter("domItemData", (itemData, element) => {
        if (element instanceof HTMLImageElement) {
            itemData.src = element.src;
            itemData.w = Number(element.naturalWidth || window.innerWidth);
            itemData.h = Number(element.naturalHeight || window.innerHeight);
            itemData.msrc = element.src;
        }
        return itemData;
    });

    lightbox.init();
}

const setupPhotoSwipe = () => {
    if (!lightbox) {
        createPhotoSwipe();
    }
    
    window.swup.hooks.on("page:view", () => {
        createPhotoSwipe();
    });

    window.swup.hooks.on(
        "content:replace",
        () => {
            lightbox?.destroy?.();
        },
        { before: true },
    );
};

if (window.swup) {
    setupPhotoSwipe();
} else {
    document.addEventListener("swup:enable", setupPhotoSwipe);
}
</script>
</document_content>
</invoke>