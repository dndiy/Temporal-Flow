---
import path from 'node:path'
import { getCollection } from 'astro:content'
import License from '@components/misc/License.astro'
import Markdown from '@components/misc/Markdown.astro'
import I18nKey from '@i18n/i18nKey'
import { i18n } from '@i18n/translation'
import MainGridLayout from '@layouts/MainGridLayout.astro'
import { getDir, getPostUrlBySlug } from '@utils/url-utils'
import { Icon } from 'astro-icon/components'
import { licenseConfig } from '../../config/config'
import PostMetadata from '../../components/PostMeta.astro'
import ImageWrapper from '../../components/misc/ImageWrapper.astro'
import { profileConfig, siteConfig } from '../../config/config'
import { formatDateToYYYYMMDD } from '../../utils/date-utils'

export async function getStaticPaths() {
  const posts = await getCollection('posts'); // Include all posts, including drafts
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props; // Destructure `post` instead of `entry`
const { Content, headings } = await post.render()

const { remarkPluginFrontmatter } = await post.render()

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: post.data.title,
  description: post.data.description || post.data.title,
  keywords: post.data.tags,
  datePublished: formatDateToYYYYMMDD(post.data.published),
  author: {
    '@type': 'Person',
    name: profileConfig.name,
    url: Astro.site,
  },
  inLanguage: (post.data.lang ? post.data.lang.replace('_', '-') : siteConfig.lang.replace('_', '-')),
  // TODO include cover image here
}
---
<MainGridLayout 
  banner={post.data.image} 
  title={post.data.title} 
  description={post.data.description} 
  lang={post.data.lang} 
  setOGTypeArticle={true} 
  headings={headings}
  post={post} 
  bannerLink={post.data.bannerLink} 

>

<!-- Add these meta tags for better date extraction -->
<meta name="publish-date" content={formatDateToYYYYMMDD(post.data.published)} slot="head" />
<meta property="article:published_time" content={post.data.published.toISOString()} slot="head" />

<script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
            <div id="post-container" 
                 class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
                    {}
                 ]}
                 data-post-date={formatDateToYYYYMMDD(post.data.published)}
                 data-post-timestamp={post.data.published.getTime()}
                 data-post-title={post.data.title}
                 data-post-category={post.data.category}
                 data-post-tags={post.data.tags.join(',')}
                 data-post-image={post.data.image}
                 data-post-description={post.data.description}>
            <!-- word count and reading time -->
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm" data-post-words={remarkPluginFrontmatter.words}>{remarkPluginFrontmatter.words} {" " + i18n(I18nKey.wordsCount)}</div>
                </div>
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm" data-post-minutes={remarkPluginFrontmatter.minutes}>{remarkPluginFrontmatter.minutes} {" " + i18n(I18nKey.minutesCount)}</div>
                </div>
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {post.data.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                <PostMetadata
                        class="mb-5"
                        published={post.data.published}
                        updated={post.data.updated}
                        tags={post.data.tags}
                        category={post.data.category}
                ></PostMetadata>
                {!post.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
            </div>

            <!-- Only show cover if it exists and showImageOnPost isn't false -->
            {post.data.image && post.data.showImageOnPost !== false &&
             <ImageWrapper id="post-cover" src={post.data.image} basePath={path.join("content/posts/", getDir(post.id))} class="mb-8 rounded-xl banner-container onload-animation"/>
            }


            <Markdown class="mb-6 markdown-content onload-animation">
                <Content />
            </Markdown>

            {licenseConfig.enable && <License title={post.data.title} slug={post.slug} pubDate={post.data.published} class="mb-6 rounded-xl license-container onload-animation"></License>}

        </div>
    </div>

    <div class="flex flex-col md:flex-row justify-between mb-4 gap-4 overflow-hidden w-full">
        <a href={post.data.nextSlug ? getPostUrlBySlug(post.data.nextSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !post.data.nextSlug}]}>
            {post.data.nextSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-start gap-4" >
                <Icon name="material-symbols:chevron-left-rounded" class="text-[2rem] text-[var(--primary)]" />
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {post.data.nextTitle}
                </div>
            </div>}
        </a>

        <a href={post.data.prevSlug ? getPostUrlBySlug(post.data.prevSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !post.data.prevSlug}]}>
            {post.data.prevSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-end gap-4">
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {post.data.prevTitle}
                </div>
                <Icon name="material-symbols:chevron-right-rounded" class="text-[2rem] text-[var(--primary)]" />
            </div>}
        </a>
    </div>

</MainGridLayout>

<style>
    /* Add scroll margin for hash navigation */
    #post-container {
      scroll-margin-top: calc(var(--navbar-height) + 2rem);
    }
    
    /* Ensure smooth scrolling */
    html {
      scroll-behavior: smooth;
    }
  </style>