---
import type { MarkdownHeading } from 'astro';
import { siteConfig } from "../../config/config";

interface Props {
  class?: string;
  headings?: MarkdownHeading[];
  htmlContent?: string;
}

let { headings = [], htmlContent } = Astro.props;

// Extract headings from HTML if provided
if (htmlContent) {
  const extractHeadingsFromHTML = (html: string): MarkdownHeading[] => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    const headings = Array.from(doc.querySelectorAll('h1, h2, h3, h4, h5, h6'));

    return headings.map((heading) => ({
      depth: parseInt(heading.tagName.substring(1)),
      text: heading.textContent || '',
      slug: heading.id || heading.textContent?.toLowerCase().replace(/\s+/g, '-') || '',
    }));
  };

  headings = extractHeadingsFromHTML(htmlContent);
}

let minDepth = 10;
for (const heading of headings) {
  minDepth = Math.min(minDepth, heading.depth);
}

const className = Astro.props.class;

const removeTailingHash = (text: string) => {
  let lastIndexOfHash = text.lastIndexOf('#');
  if (lastIndexOfHash != text.length - 1) {
    return text;
  }
  return text.substring(0, lastIndexOfHash);
};

let heading1Count = 1;
const maxLevel = siteConfig.toc.depth;
---

<table-of-contents class:list={[className, "group"]}>
  {headings.filter((heading) => heading.depth < minDepth + maxLevel).map((heading) =>
    <a href={`#${heading.slug}`} class="px-2 flex gap-2 relative transition w-full min-h-9 rounded-xl hover:bg-[var(--toc-btn-hover)] active:bg-[var(--toc-btn-active)] py-2">
      <div class:list={["transition w-5 h-5 shrink-0 rounded-lg text-xs flex items-center justify-center font-bold", {
        "bg-[var(--toc-badge-bg)] text-[var(--btn-content)]": heading.depth == minDepth,
        "ml-4": heading.depth == minDepth + 1,
        "ml-8": heading.depth == minDepth + 2,
      }]}>
        {heading.depth == minDepth && heading1Count++}
        {heading.depth == minDepth + 1 && <div class="transition w-2 h-2 rounded-[0.1875rem] bg-[var(--toc-badge-bg)]"></div>}
        {heading.depth == minDepth + 2 && <div class="transition w-1.5 h-1.5 rounded-sm bg-black/5 dark:bg-white/10"></div>}
      </div>
      <div class:list={["transition text-sm relative z-10", {
        "text-50": heading.depth == minDepth || heading.depth == minDepth + 1,
        "text-30": heading.depth == minDepth + 2,
      }]}>{removeTailingHash(heading.text)}</div>
    </a>
  )}
  <div id="active-indicator" class:list={[{'hidden': headings.length == 0}, "absolute bg-[var(--toc-btn-hover)] left-0 right-0 rounded-xl transition-all group-hover:bg-transparent border-2 border-[var(--toc-btn-hover)] group-hover:border-[var(--toc-btn-active)] border-dashed"]}></div>
</table-of-contents>

<script>
    class TableOfContents extends HTMLElement {
        // Existing properties
        tocEl: HTMLElement | null = null;
        visibleClass = "visible";
        observer: IntersectionObserver;
        anchorNavTarget: HTMLElement | null = null;
        headingIdxMap = new Map<string, number>();
        headings: HTMLElement[] = [];
        sections: HTMLElement[] = [];
        tocEntries: HTMLAnchorElement[] = [];
        active: boolean[] = [];
        activeIndicator: HTMLElement | null = null;
        initialized: boolean = false;
        
        // New properties
        isUserScrolling = false;
        scrollTimeout: ReturnType<typeof setTimeout> | null = null;
        rebuildDebounceTimer: ReturnType<typeof setTimeout> | null = null;
        tocIsShown: boolean = false;
        
        constructor() {
            super();
            this.observer = new IntersectionObserver(
                this.markVisibleSection, { threshold: 0 }
            );
        }
    
        // Modified method to check scroll position
        handleUserScroll = () => {
            this.isUserScrolling = true;
            if (this.scrollTimeout) clearTimeout(this.scrollTimeout);
            this.scrollTimeout = setTimeout(() => {
                this.isUserScrolling = false;
            }, 150);
            
            // Check scroll position to determine if TOC should be shown
            const scrollThreshold = 800; // Adjust this to match your banner height
            
            if (!this.tocIsShown && window.scrollY > scrollThreshold) {
                this.tocIsShown = true;
                this.classList.add('toc-shown');
            } else if (this.tocIsShown && window.scrollY <= scrollThreshold) {
                this.tocIsShown = false;
                this.classList.remove('toc-shown');
            }
        };
        
        markVisibleSection = (entries: IntersectionObserverEntry[]) => {
            entries.forEach((entry) => {
                const id = entry.target.children[0]?.getAttribute("id");
                const idx = id ? this.headingIdxMap.get(id) : undefined;
                if (idx != undefined)
                    this.active[idx] = entry.isIntersecting;
    
                if (entry.isIntersecting && this.anchorNavTarget == entry.target.firstChild)
                    this.anchorNavTarget = null;
            });
    
            if (!this.active.includes(true))
                this.fallback();
            this.update();
        };
    
        toggleActiveHeading = () => {
            let i = this.active.length - 1;
            let min = this.active.length - 1, max = 0;
            let activeFound = false;
            
            // First identify active entries
            while (i >= 0) {
                if (this.active[i]) {
                    this.tocEntries[i].classList.add(this.visibleClass);
                    min = Math.min(min, i);
                    max = Math.max(max, i);
                    activeFound = true;
                } else {
                    this.tocEntries[i].classList.remove(this.visibleClass);
                }
                i--;
            }
            
            // If no active headings are found, don't update the indicator position
            if (!activeFound || !this.activeIndicator) return;
            
            // Use getBoundingClientRect for more accurate positioning
            const tocRect = this.tocEl?.getBoundingClientRect() || {top: 0};
            const minEntryRect = this.tocEntries[min].getBoundingClientRect();
            const maxEntryRect = this.tocEntries[max].getBoundingClientRect();
            
            const top = minEntryRect.top - tocRect.top;
            const height = maxEntryRect.bottom - minEntryRect.top;
            
            // Set position absolutely rather than using transform
            this.activeIndicator.style.top = `${top}px`;  // Changed from transform
            this.activeIndicator.style.height = `${height}px`;
            this.activeIndicator.style.transform = '';  // Remove transform property
        };
    
        scrollToActiveHeading = () => {
            if (this.anchorNavTarget || !this.tocEl || this.isUserScrolling) return;
            
            const activeHeadings = document.querySelectorAll<HTMLDivElement>(`#toc .${this.visibleClass}`);
            if (!activeHeadings.length) return;
            
            const tocRect = this.tocEl.getBoundingClientRect();
            const firstActiveRect = activeHeadings[0].getBoundingClientRect();
            const lastActiveRect = activeHeadings[activeHeadings.length - 1].getBoundingClientRect();
            
            // Check if all active headings are already visible
            if (firstActiveRect.top >= tocRect.top && lastActiveRect.bottom <= tocRect.bottom) {
                return; // All active headings are visible, no need to scroll
            }
            
            let targetScrollTop;
            
            // If the active section is small enough to fit in the view
            if (lastActiveRect.bottom - firstActiveRect.top < tocRect.height * 0.8) {
                // Center the active section
                targetScrollTop = (this.tocEl.scrollTop + firstActiveRect.top - tocRect.top) - 
                                (tocRect.height - (lastActiveRect.bottom - firstActiveRect.top)) / 2;
            } else {
                // Show the beginning of the active section with some padding
                targetScrollTop = this.tocEl.scrollTop + firstActiveRect.top - tocRect.top - 16;
            }
            
            this.tocEl.scrollTo({
                top: targetScrollTop,
                behavior: "smooth"
            });
        };
    
        update = () => {
            requestAnimationFrame(() => {
                // Force layout recalculation before updating indicators
                document.body.getBoundingClientRect();
                this.toggleActiveHeading();
                
                // Only scroll if user isn't actively scrolling
                if (!this.isUserScrolling) {
                    this.scrollToActiveHeading();
                }
            });
        };
    
        fallback = () => {
            if (!this.sections.length) return;
    
            for (let i = 0; i < this.sections.length; i++) {
                let offsetTop = this.sections[i].getBoundingClientRect().top;
                let offsetBottom = this.sections[i].getBoundingClientRect().bottom;
    
                if (this.isInRange(offsetTop, 0, window.innerHeight)
                    || this.isInRange(offsetBottom, 0, window.innerHeight)
                    || (offsetTop < 0 && offsetBottom > window.innerHeight)) {                    
                    this.markActiveHeading(i);
                }
                else if (offsetTop > window.innerHeight) break;
            }
        };
    
        markActiveHeading = (idx: number) => {
            this.active[idx] = true;
        };
    
        handleAnchorClick = (event: Event) => {
            const anchor = event
                .composedPath()
                .find((element) => element instanceof HTMLAnchorElement);
    
            if (anchor) {
                const id = decodeURIComponent(anchor.hash?.substring(1));
                const idx = this.headingIdxMap.get(id);
                if (idx !== undefined) {
                    this.anchorNavTarget = this.headings[idx];
                } else {
                    this.anchorNavTarget = null;
                }
            }
        };
    
        isInRange(value: number, min: number, max: number) {
            return min < value && value < max;
        };
    
        connectedCallback() {
            // Initialize on load
            window.addEventListener('load', () => {
                this.init();
                this.listenForCollapsibleChanges();
            }, { once: true });
    
            // Reinitialize on Astro page transitions
            document.addEventListener('astro:page-load', () => {
                this.init();
                this.listenForCollapsibleChanges();
            });
    
            // Fallback timeout
            setTimeout(() => {
                if (!this.initialized) {
                    this.init();
                    this.listenForCollapsibleChanges();
                }
            }, 1000);
            
            // Add scroll event listener for TOC visibility
            window.addEventListener('scroll', this.handleUserScroll, { passive: true });
        }
    
        listenForCollapsibleChanges() {
            const collapsibleSections = document.querySelectorAll('.collapsible-content');
            collapsibleSections.forEach(section => {
                const observer = new MutationObserver((mutations) => {
                    // Debounce the rebuild to avoid frequent updates during transitions
                    if (this.rebuildDebounceTimer) clearTimeout(this.rebuildDebounceTimer);
                    this.rebuildDebounceTimer = setTimeout(() => {
                        this.rebuildTOC();
                    }, 1000); // Wait for transition to complete
                });
                observer.observe(section, { 
                    attributes: true,
                    attributeFilter: ['style', 'class'] 
                });
                
                // Also listen for transitionend events
                section.addEventListener('transitionend', (e) => {
                    if ((e as TransitionEvent).propertyName === 'max-height' || 
                        (e as TransitionEvent).propertyName === 'opacity') {
                        this.rebuildTOC();
                    }
                });
            });
        }
    
        rebuildTOC() {
            console.log("Rebuilding TOC after collapsible content change");
            
            // Clean up existing observers
            this.sections.forEach(section => {
                if (section) {
                    this.observer.unobserve(section);
                }
            });
            
            // Re-initialize TOC entries
            this.findHeadingsAndUpdateTOC();
        }
    
        findHeadingsAndUpdateTOC() {
            // First, check if TOC wrapper exists
            if (!this.tocEl) {
                this.tocEl = document.getElementById("toc-inner-wrapper");
                if (!this.tocEl) {
                    console.warn("TOC wrapper not found during rebuild");
                    return;
                }
            }
    
            // Get all TOC entries
            this.tocEntries = Array.from(
                document.querySelectorAll<HTMLAnchorElement>("#toc a[href^='#']")
            );
            
            // debugging that became annoying after a while
            //if (this.tocEntries.length === 0) {
            //    console.warn("No TOC entries found during rebuild");
            //    return;
            //}
    
            // Get all headings from the document
            const allHeadings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));
    
            // Filter headings to include only those in visible sections
            const visibleHeadings = allHeadings.filter(heading => {
                // Check if the heading is inside a collapsible container
                const collapsibleParent = heading.closest('.collapsible-content');
                if (!collapsibleParent) return true; // Not in a collapsible section
    
                // Check if the collapsible container is visible
                const parentElement = collapsibleParent as HTMLElement;
                const isVisible = parentElement.style.maxHeight !== '0px' && 
                                  parentElement.style.opacity !== '0';
                return isVisible;
            });
    
            // Reset sections, headings, and heading index map
            this.sections = new Array(this.tocEntries.length);
            this.headings = new Array(this.tocEntries.length);
            this.headingIdxMap.clear();
    
            // Match TOC entries to visible headings
            for (let i = 0; i < this.tocEntries.length; i++) {
                const id = decodeURIComponent(this.tocEntries[i].hash?.substring(1));
                const heading = document.getElementById(id);
    
                if (heading instanceof HTMLElement && visibleHeadings.includes(heading)) {
                    const section = heading?.parentElement;
                    if (section instanceof HTMLElement) {
                        this.headings[i] = heading;
                        this.sections[i] = section;
                        this.headingIdxMap.set(id, i);
                    }
                }
            }
    
            // Reset active state
            this.active = new Array(this.tocEntries.length).fill(false);
    
            // Re-observe sections
            this.sections.forEach(section => {
                if (section) {
                    this.observer.observe(section);
                }
            });
    
            // Update TOC
            this.fallback();
            this.update();
        }
    
        init() {
            // Check if already initialized to prevent double initialization
            if (this.initialized) return;
            this.initialized = true;
            
            this.tocEl = document.getElementById("toc-inner-wrapper");
            if (!this.tocEl) {
                console.warn("TOC wrapper not found");
                return;
            }
            
            this.tocEl.addEventListener("click", this.handleAnchorClick, {
                capture: true,
            });
    
            this.activeIndicator = document.getElementById("active-indicator");
    
            // Initial load of TOC entries
            this.findHeadingsAndUpdateTOC();
    
            this.tocEntries = Array.from(
                document.querySelectorAll<HTMLAnchorElement>("#toc a[href^='#']")
            );
    
            if (this.tocEntries.length === 0) return;
    
            this.sections = new Array(this.tocEntries.length);
            this.headings = new Array(this.tocEntries.length);
            for (let i = 0; i < this.tocEntries.length; i++) {
                const id = decodeURIComponent(this.tocEntries[i].hash?.substring(1));
                const heading = document.getElementById(id);
                const section = heading?.parentElement;
                if (heading instanceof HTMLElement && section instanceof HTMLElement) {
                    this.headings[i] = heading;
                    this.sections[i] = section;
                    this.headingIdxMap.set(id, i);
                }
            }
            this.active = new Array(this.tocEntries.length).fill(false);
    
            this.sections.forEach((section) =>
                this.observer.observe(section)
            );
    
            this.fallback();
            this.update();
            
            // Check initial scroll position
            const scrollThreshold = 300; // Match the value from handleUserScroll
            if (window.scrollY > scrollThreshold) {
                this.tocIsShown = true;
                this.classList.add('toc-shown');
            } else {
                this.tocIsShown = false;
                this.classList.remove('toc-shown');
            }
        }
        
        disconnectedCallback() {
            // Existing cleanup
            this.sections.forEach((section) => this.observer.unobserve(section));
            this.observer.disconnect();
            this.tocEl?.removeEventListener("click", this.handleAnchorClick);
            
            // New cleanup
            window.removeEventListener('scroll', this.handleUserScroll);
            
            // Clear any pending timers
            if (this.rebuildDebounceTimer) clearTimeout(this.rebuildDebounceTimer);
            if (this.scrollTimeout) clearTimeout(this.scrollTimeout);
        }
    }
    
    customElements.define("table-of-contents", TableOfContents);
</script>

<style>
  /* Add TOC show/hide styles */
  table-of-contents {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease, transform 0.3s ease;
    transform: translateY(10px);
  }
  
  table-of-contents.toc-shown {
    opacity: 1;
    pointer-events: auto;
    transform: translateY(0);
  }
</style>